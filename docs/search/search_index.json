{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Babelsheet Babelsheet node service allows you to translate all of the UI / app content to specific language. As a user interface we use google spreadsheets and translations are synchronised every 5 minutes by default. This service contains a scheduler to synchronise translations, a web server allowing you to fetch them, and a CLI tools which can generate translations in various formats. What's more there is a cache layer for better performance. Babelsheet supports formats: Android iOS json yml xlf No more dealing with complicated paid translation services or problems with multiple users working at the same time! To run CLI Create configuration file . npm i -g babelsheet babelsheet generate To run API Create configuration file . Create docker-compose.yml . docker-compose up","title":"Getting started"},{"location":"#about-babelsheet","text":"Babelsheet node service allows you to translate all of the UI / app content to specific language. As a user interface we use google spreadsheets and translations are synchronised every 5 minutes by default. This service contains a scheduler to synchronise translations, a web server allowing you to fetch them, and a CLI tools which can generate translations in various formats. What's more there is a cache layer for better performance. Babelsheet supports formats: Android iOS json yml xlf No more dealing with complicated paid translation services or problems with multiple users working at the same time!","title":"About Babelsheet"},{"location":"#to-run-cli","text":"Create configuration file . npm i -g babelsheet babelsheet generate","title":"To run CLI"},{"location":"#to-run-api","text":"Create configuration file . Create docker-compose.yml . docker-compose up","title":"To run API"},{"location":"configuration/","text":"In order to start using babelsheet, you have to configure your .env.babelsheet file first. If you want, you can keep envs in .env file, all variables stored in .env will be overwritten by those stored in .env.babelsheet . Configuration file BABELSHEET_CLIENT_ID= GOOGLE-CLIENT-ID BABELSHEET_CLIENT_SECRET= GOOGLE-CLIENT-SECRET BABELSHEET_SPREADSHEET_ID= SPREADSHEET-ID BABELSHEET_SPREADSHEET_NAME= SPREADSHEET-NAME BABELSHEET_REFRESH_TOKEN= REFRESH-TOKEN BABELSHEET_REDIRECT_URI=http://localhost:3000/oauth2callback BABELSHEET_REDIS_HOST=redis BABELSHEET_REDIS_PORT=6379 BABELSHEET_HOST=localhost BABELSHEET_PORT=3000 NODE_ENV=dev APP_NAME=babelsheet-node LOGGING_LEVEL=debug Configuration options BABELSHEET_CLIENT_ID * - client id received from Google ( see how to config ) BABELSHEET_CLIENT_SECRET * - client secret received from Google ( see how to config ) BABELSHEET_SPREADSHEET_ID * - spreadsheet ID from spreadsheet URL How to get spreadsheet ID Spreadsheet ID can be taken from spreadsheet url. It's the part after /d/ sign: https://docs.google.com/spreadsheets/d/ spreadsheet-id / BABELSHEET_SPREADSHEET_NAME * - sheet name How to get spreadsheet name Spreadsheet name is the name of the tab in spreadsheet document. BABELSHEET_REFRESH_TOKEN * - refresh token ( see how to obtain ) BABELSHEET_REDIRECT_URI - url to which user should be redirected after receiving refresh token BABELSHEET_REDIS_HOST - host name of redis store BABELSHEET_REDIS_PORT - port of redis store BABELSHEET_HOST - host name for winston BABELSHEET_PORT - API port NODE_ENV - environment type APP_NAME - name which indentify app LOGGING_LEVEL - Log level debug/error/info * - required Configuring Google Spreadsheet API Create account in Google Cloud Platform. Creating account in details Go to https://cloud.google.com/ . Click Try free , then fill the form, next click Agree and continue and Submit . Create a project in Google Cloud Platform and enable Google Sheets API usage (section API Services dashboard). Creating project with enable API in details Go to https://console.cloud.google.com . Click Select a project , then NEW PROJECT , write name of the project and click CREATE . Choose API . Click ENABLE APIS AND SERVICES . Find Google sheets . Click Enable . Go to section Create credendials and fill in the form with proper product name, e-mail address, redirect uri as http://localhost:3000/oauth2callback then click Done . Creating credentials in details From previous view, select Create credentials . Fill the form and click Done . IMPORTANT! Remember to add http://localhost:3000/oauth2callback to 'Authorised redirect URIs' , you can add any other redirect uri, later passing it as BABELSHEET_REDIRECT_URI in .env.babelsheet file . You will be given Client ID and Client secret keys, use them in environment variables BABELSHEET_CLIENT_ID and BABELSHEET_CLIENT_SECRET in .env.babelsheet file . You can get your spreadsheet ID and spreadsheet name , then you will be ready to generate translations. Generating refresh token To generate refresh token, you have to configure Google Spreadsheet API first. When BABELSHEET_CLIENT_ID and BABELSHEET_CLIENT_SECRET are stored in .env.babelsheet file, you are ready to generate refresh-token. Run babelsheet init . If babelsheet is not installed, run npm i -g babelsheet to install. BABELSHEET_CLIENT_ID and BABELSHEET_CLIENT_SECRET as params You don't have to create .env.babelsheet file, you can pass BABELSHEET_CLIENT_ID and BABELSHEET_CLIENT_SECRET values as parameters to babelsheet: npm generate --client_id yours-client-id --client_secret yours-client-secret Config in json file You can also generate token in data.json file, just by passing json parameter option npm init --config-format json . Browser window will be opened automatically. Log in into you Google account and then grant your application an access for reading spreadsheets in your account. You should be given a message Authentication successful! Please return to the console . Refresh token is now stored in .env.babelsheet file. You can change storage type here . More actions won't be needed because tokens will be refreshed automatically if necessary.","title":"Configuration"},{"location":"configuration/#configuration-file","text":"BABELSHEET_CLIENT_ID= GOOGLE-CLIENT-ID BABELSHEET_CLIENT_SECRET= GOOGLE-CLIENT-SECRET BABELSHEET_SPREADSHEET_ID= SPREADSHEET-ID BABELSHEET_SPREADSHEET_NAME= SPREADSHEET-NAME BABELSHEET_REFRESH_TOKEN= REFRESH-TOKEN BABELSHEET_REDIRECT_URI=http://localhost:3000/oauth2callback BABELSHEET_REDIS_HOST=redis BABELSHEET_REDIS_PORT=6379 BABELSHEET_HOST=localhost BABELSHEET_PORT=3000 NODE_ENV=dev APP_NAME=babelsheet-node LOGGING_LEVEL=debug","title":"Configuration file"},{"location":"configuration/#configuration-options","text":"BABELSHEET_CLIENT_ID * - client id received from Google ( see how to config ) BABELSHEET_CLIENT_SECRET * - client secret received from Google ( see how to config ) BABELSHEET_SPREADSHEET_ID * - spreadsheet ID from spreadsheet URL How to get spreadsheet ID Spreadsheet ID can be taken from spreadsheet url. It's the part after /d/ sign: https://docs.google.com/spreadsheets/d/ spreadsheet-id / BABELSHEET_SPREADSHEET_NAME * - sheet name How to get spreadsheet name Spreadsheet name is the name of the tab in spreadsheet document. BABELSHEET_REFRESH_TOKEN * - refresh token ( see how to obtain ) BABELSHEET_REDIRECT_URI - url to which user should be redirected after receiving refresh token BABELSHEET_REDIS_HOST - host name of redis store BABELSHEET_REDIS_PORT - port of redis store BABELSHEET_HOST - host name for winston BABELSHEET_PORT - API port NODE_ENV - environment type APP_NAME - name which indentify app LOGGING_LEVEL - Log level debug/error/info * - required","title":"Configuration options"},{"location":"configuration/#configuring-google-spreadsheet-api","text":"Create account in Google Cloud Platform. Creating account in details Go to https://cloud.google.com/ . Click Try free , then fill the form, next click Agree and continue and Submit . Create a project in Google Cloud Platform and enable Google Sheets API usage (section API Services dashboard). Creating project with enable API in details Go to https://console.cloud.google.com . Click Select a project , then NEW PROJECT , write name of the project and click CREATE . Choose API . Click ENABLE APIS AND SERVICES . Find Google sheets . Click Enable . Go to section Create credendials and fill in the form with proper product name, e-mail address, redirect uri as http://localhost:3000/oauth2callback then click Done . Creating credentials in details From previous view, select Create credentials . Fill the form and click Done . IMPORTANT! Remember to add http://localhost:3000/oauth2callback to 'Authorised redirect URIs' , you can add any other redirect uri, later passing it as BABELSHEET_REDIRECT_URI in .env.babelsheet file . You will be given Client ID and Client secret keys, use them in environment variables BABELSHEET_CLIENT_ID and BABELSHEET_CLIENT_SECRET in .env.babelsheet file . You can get your spreadsheet ID and spreadsheet name , then you will be ready to generate translations.","title":"Configuring Google Spreadsheet API"},{"location":"configuration/#generating-refresh-token","text":"To generate refresh token, you have to configure Google Spreadsheet API first. When BABELSHEET_CLIENT_ID and BABELSHEET_CLIENT_SECRET are stored in .env.babelsheet file, you are ready to generate refresh-token. Run babelsheet init . If babelsheet is not installed, run npm i -g babelsheet to install. BABELSHEET_CLIENT_ID and BABELSHEET_CLIENT_SECRET as params You don't have to create .env.babelsheet file, you can pass BABELSHEET_CLIENT_ID and BABELSHEET_CLIENT_SECRET values as parameters to babelsheet: npm generate --client_id yours-client-id --client_secret yours-client-secret Config in json file You can also generate token in data.json file, just by passing json parameter option npm init --config-format json . Browser window will be opened automatically. Log in into you Google account and then grant your application an access for reading spreadsheets in your account. You should be given a message Authentication successful! Please return to the console . Refresh token is now stored in .env.babelsheet file. You can change storage type here . More actions won't be needed because tokens will be refreshed automatically if necessary.","title":"Generating refresh token"},{"location":"development/","text":"Set refresh token read providers You can set order of BABELSHEET_REFRESH_TOKEN providers in /src/services/producer/container.ts for producer, and in /src/services/cli/container.ts for CLI tool: readProviders: [ container.resolve InEnvStorage ('inEnvStorage'), container.resolve InFileStorage ('inFileStorage'), container.resolve InRedisStorage ('inRedisStorage'), ], First .env.babelsheet file will be checked does it contain BABELSHEET_REFRESH_TOKEN , if not, next data.json file will be checked, and the last one will be redis storage. Feel free to change order of those providers, or creating new ones. Set refresh token write provider You can set BABELSHEET_REFRESH_TOKEN write provider in /src/services/cli/container.ts for CLI tool, and in /src/services/producer/container.ts for producer. Notice that producer will only have ability to save BABELSHEET_REFRESH_TOKEN when you run it locally, not in docker container - browser window will be opened automatically. writeProvider: container.resolve InEnvStorage ('inEnvStorage'), You can change it to one of those three storages: container.resolve InEnvStorage ('inEnvStorage') container.resolve InFileStorage ('inFileStorage') container.resolve InRedisStorage ('inRedisStorage') Feel free to add new providers. Change translations storage from redis to file Service is implemented to use redis as cache storage but can use another database or even in memory cache as well. There are various implementations in src/infrastracture/storage . For fast production use it is recommended to use redis, but for local development and debugging in memory implementation can be used. There are some other implementations available now, like inFileStorage . In order to change translations storage in file: Open /src/services/producer/container.ts and change: storage: awilix.asClass(InRedisStorage) to: storage: awilix.asClass(InFileStorage) Open /src/services/api/container.ts and change: storage: awilix.asClass(InFileStorage) to: fileRepository: awilix.asClass(FileRepository, { lifetime: awilix.Lifetime.SINGLETON }), storage: awilix.asClass(InFileStorage) Producer will now save to data.json file, and API will read from that file as well. Scripts npm run test - runs tests and generates coverage report npm run test-watch - runs tests continuously and watches for changes npm run format - formats code using prettier npm run type-check - runs typescript checks npm run build - compiles typescript npm run lint - runs typescript linter npm run lint-fix - runs typescript linter and fixes some common mistakes npm run nsp - runs security check npm run start-producer - runs redis producer npm run start-api - runs api","title":"Development"},{"location":"development/#set-refresh-token-read-providers","text":"You can set order of BABELSHEET_REFRESH_TOKEN providers in /src/services/producer/container.ts for producer, and in /src/services/cli/container.ts for CLI tool: readProviders: [ container.resolve InEnvStorage ('inEnvStorage'), container.resolve InFileStorage ('inFileStorage'), container.resolve InRedisStorage ('inRedisStorage'), ], First .env.babelsheet file will be checked does it contain BABELSHEET_REFRESH_TOKEN , if not, next data.json file will be checked, and the last one will be redis storage. Feel free to change order of those providers, or creating new ones.","title":"Set refresh token read providers"},{"location":"development/#set-refresh-token-write-provider","text":"You can set BABELSHEET_REFRESH_TOKEN write provider in /src/services/cli/container.ts for CLI tool, and in /src/services/producer/container.ts for producer. Notice that producer will only have ability to save BABELSHEET_REFRESH_TOKEN when you run it locally, not in docker container - browser window will be opened automatically. writeProvider: container.resolve InEnvStorage ('inEnvStorage'), You can change it to one of those three storages: container.resolve InEnvStorage ('inEnvStorage') container.resolve InFileStorage ('inFileStorage') container.resolve InRedisStorage ('inRedisStorage') Feel free to add new providers.","title":"Set refresh token write provider"},{"location":"development/#change-translations-storage-from-redis-to-file","text":"Service is implemented to use redis as cache storage but can use another database or even in memory cache as well. There are various implementations in src/infrastracture/storage . For fast production use it is recommended to use redis, but for local development and debugging in memory implementation can be used. There are some other implementations available now, like inFileStorage . In order to change translations storage in file: Open /src/services/producer/container.ts and change: storage: awilix.asClass(InRedisStorage) to: storage: awilix.asClass(InFileStorage) Open /src/services/api/container.ts and change: storage: awilix.asClass(InFileStorage) to: fileRepository: awilix.asClass(FileRepository, { lifetime: awilix.Lifetime.SINGLETON }), storage: awilix.asClass(InFileStorage) Producer will now save to data.json file, and API will read from that file as well.","title":"Change translations storage from redis to file"},{"location":"development/#scripts","text":"npm run test - runs tests and generates coverage report npm run test-watch - runs tests continuously and watches for changes npm run format - formats code using prettier npm run type-check - runs typescript checks npm run build - compiles typescript npm run lint - runs typescript linter npm run lint-fix - runs typescript linter and fixes some common mistakes npm run nsp - runs security check npm run start-producer - runs redis producer npm run start-api - runs api","title":"Scripts"},{"location":"docker/","text":"docker-compose To proprely run API, you need to run redis storage and producer as well. It can be runned by docker-compose. First create docker-compose.yml file and paste in: version: '3' services: babelsheet-api: image: tsh/babelsheet-api env_file: - .env - .env.babelsheet ports: - 3000:3000 depends_on: - redis babelsheet-producer: image: tsh/babelsheet-producer env_file: - .env - .env.babelsheet depends_on: - redis redis: image: redis ports: - 6379:6379 Next, make sure you have proper .env.babelsheet file in the same directory, then run docker-compose up , and API should be working now. Redis To run redis as a docker container type docker run --name redis -p 6379:6379 redis Or run it from docker-compose.yml file by following command: docker-compose up redis Producer To run producer from docker-compose.yml file run following command: docker-compose up babelsheet-producer API To run API from docker-compose.yml file run following command: docker-compose up babelsheet-api","title":"Docker"},{"location":"docker/#docker-compose","text":"To proprely run API, you need to run redis storage and producer as well. It can be runned by docker-compose. First create docker-compose.yml file and paste in: version: '3' services: babelsheet-api: image: tsh/babelsheet-api env_file: - .env - .env.babelsheet ports: - 3000:3000 depends_on: - redis babelsheet-producer: image: tsh/babelsheet-producer env_file: - .env - .env.babelsheet depends_on: - redis redis: image: redis ports: - 6379:6379 Next, make sure you have proper .env.babelsheet file in the same directory, then run docker-compose up , and API should be working now.","title":"docker-compose"},{"location":"docker/#redis","text":"To run redis as a docker container type docker run --name redis -p 6379:6379 redis Or run it from docker-compose.yml file by following command: docker-compose up redis","title":"Redis"},{"location":"docker/#producer","text":"To run producer from docker-compose.yml file run following command: docker-compose up babelsheet-producer","title":"Producer"},{"location":"docker/#api","text":"To run API from docker-compose.yml file run following command: docker-compose up babelsheet-api","title":"API"},{"location":"how-it-works/","text":"For BabelSheet to know how to handle your translations, you need to stick with very simple spreadsheet markup. Metadata : $$$ - determines column with optional comments, each comment describes whole row ### - determines column with optional tags, each tag describes whole row, there might be more tags per row and they should be separated by a comma - determines column with translation key, there might be more such columns placed one after another, each column makes another key which is nested, e.g. CORE.LABELS or FRONT.HEADER.TITLE . locale, e.g. en_US , pl_PL and others - determines column with translations for specific locale Example: $$$ ### en pl CORE LABELS comment1 tag1, tag2 YES Yes Tak comment2 tag1 NO No Nie FRONT HEADER TITLE Something Co\u015b Nothing is more self-explanatory then a working example .","title":"How it works"},{"location":"services/","text":"CLI Command line tool is used to obtain BABELSHEET_REFRESH_TOKEN , as well as to generate translations files. It's possible to generate translations files in given formats: Android iOS JSON YML To run command line tools, you need to install it first: npm i -g babelsheet If you want to obtain BABELSHEET_REFRESH_TOKEN then see generating refresh token section. Generating translations files To generate translations type: babelsheet generate [options] Remember to create .env.babelsheet file before generating translations. If you won't provide BABELSHEET_REFRESH_TOKEN in .env.babelsheet file or data.json file, babelsheet will automatically open browser to create such token, and will save it in the right storage - you can change read and write storages, check it here . Options --config-format (alias: -cf ) (default: env ) Where to store config (refresh token) env/json. --format (alias: -f ) (default: json ) Format type ( android/ios/json/yml/xlf ). --path (alias: -p ) (default: . ) Path for saving files. --language (alias: -l ) Language code for generating translations only in given language. --filename (alias: -n ) (default: translations ) Filename of final translation file. --filters (alias: -n ) (default: none ) Filters. Passed as space separated list, with keys separated by dots. (--filters en_US.CORE.COMMON en_US.CORE.SPECIFIC). Can include tags, as a second part of the filter expression (--filters en_US.tag1.CORE), or first if locale is ommited (--filters tag1.CORE). If there is no locale in the filter, the filter is applied to every locale. --comments (default: false ) Includes comments in result files. JSON files don't include comments. --base (default: EN ) Base language for translations. Base.lproj folder on iOS format and values folder on android format. --merge Creates one file with all languages. --client-id Client id received from Google. Overwrites .env.babelsheet BABELSHEET_CLIENT_ID value. ( see how to obtain ) --client-secret Client secret received from Google. Overwrites .env.babelsheet BABELSHEET_CLIENT_SECRET value. ( see how to obtain ) --spreadsheet-id Spreadsheet ID from spreadsheet URL. Overwrites .env.babelsheet BABELSHEET_SPREADSHEET_ID value. ( see how to obtain ) --spreadsheet-name Sheet name. Overwrites .env.babelsheet BABELSHEET_SPREADSHEET_NAME value. ( see how to obtain ) --redirect-uri Url to which user should be redirected after receiving refresh token. Overwrite .env.babelsheet BABELSHEET_REDIRECT_URI value. ( see how to obtain ) --help Help menu. Examples babelsheet generate -f json -n my-own-en-translations -l en_US -p ./my-folder - generates english translations in my-own-en-translations.json file inside ./my-folder folder. babelsheet generate --format ios --path ./translations - generates translations in iOS format in ./translations folder. Producer Producer is used to fetch translations file, convert it and then store it in a database. The process is wrapped in a scheduler which repeats the whole operation continuously every 5 minutes by default. Please note that if there are no proper environment variables such as BABELSHEET_CLIENT_ID , BABELSHEET_CLIENT_SECRET and BABELSHEET_REFRESH_TOKEN then producer won't be able to work properly. In such case it runs a command responsible for obtaining those keys. You can run Producer in a docker container - see Docker . If you want to run producer locally, first remember about setting environment variables and running redis , next type: npm run dev-install npm run dev-start-producer Producer should be working now. You can change BABELSHEET_REFRESH_TOKEN read and write providers, check it here . You can also change translations storage from redis to file, check it here . API API is a web server built on top of express.js which serves translations. There is one endpoint available to obtain translations, which is /translations . Translations can be filtered by using: filters[] - e.g. calling /translations?filters[]=en_US.CORE will result in getting translations for en_US locale and section CORE . Other possibility is to use tag as a filter, e.g. /translations?filters[]=en_US.tag1 . format - translations can be served in json/android/ios/yml/xlf formats, just add adtitional parameter e.g. /translations?filters[]=en_US.CORE format=android . Can include tags, as a second part of the filter expression (en_US.tag1.CORE), or first if locale is ommited (tag1.CORE). If there is no locale present, the filter is applied to each locale. keepLocale - translations can include locale prefixes, even when single locale is returned if this is set to true, e.g. /translations?keepLocale=true . comments - translations can include comments, e.g. /translations?comments=true . JSON results don't include comments. version - version (spreadsheet name) that will be returned. If this isn't provided then it's taken from BABELSHEET_SPREADSHEET_NAME environment variable. You can run API in docker container - see Docker . If you want to run API locally, first remember about setting environment variables and running redis , next type: npm run dev-install npm run dev-start-api API should be working now. Usage curl -X GET -g 'http://localhost:3000/translations' curl -X GET -g 'http://localhost:3000/translations?filters[]=en_US.CORE' curl -X GET -g 'http://localhost:3000/translations?filters[]=en_US.CORE.LABELS format=android'","title":"Services"},{"location":"services/#cli","text":"Command line tool is used to obtain BABELSHEET_REFRESH_TOKEN , as well as to generate translations files. It's possible to generate translations files in given formats: Android iOS JSON YML To run command line tools, you need to install it first: npm i -g babelsheet If you want to obtain BABELSHEET_REFRESH_TOKEN then see generating refresh token section.","title":"CLI"},{"location":"services/#generating-translations-files","text":"To generate translations type: babelsheet generate [options] Remember to create .env.babelsheet file before generating translations. If you won't provide BABELSHEET_REFRESH_TOKEN in .env.babelsheet file or data.json file, babelsheet will automatically open browser to create such token, and will save it in the right storage - you can change read and write storages, check it here . Options --config-format (alias: -cf ) (default: env ) Where to store config (refresh token) env/json. --format (alias: -f ) (default: json ) Format type ( android/ios/json/yml/xlf ). --path (alias: -p ) (default: . ) Path for saving files. --language (alias: -l ) Language code for generating translations only in given language. --filename (alias: -n ) (default: translations ) Filename of final translation file. --filters (alias: -n ) (default: none ) Filters. Passed as space separated list, with keys separated by dots. (--filters en_US.CORE.COMMON en_US.CORE.SPECIFIC). Can include tags, as a second part of the filter expression (--filters en_US.tag1.CORE), or first if locale is ommited (--filters tag1.CORE). If there is no locale in the filter, the filter is applied to every locale. --comments (default: false ) Includes comments in result files. JSON files don't include comments. --base (default: EN ) Base language for translations. Base.lproj folder on iOS format and values folder on android format. --merge Creates one file with all languages. --client-id Client id received from Google. Overwrites .env.babelsheet BABELSHEET_CLIENT_ID value. ( see how to obtain ) --client-secret Client secret received from Google. Overwrites .env.babelsheet BABELSHEET_CLIENT_SECRET value. ( see how to obtain ) --spreadsheet-id Spreadsheet ID from spreadsheet URL. Overwrites .env.babelsheet BABELSHEET_SPREADSHEET_ID value. ( see how to obtain ) --spreadsheet-name Sheet name. Overwrites .env.babelsheet BABELSHEET_SPREADSHEET_NAME value. ( see how to obtain ) --redirect-uri Url to which user should be redirected after receiving refresh token. Overwrite .env.babelsheet BABELSHEET_REDIRECT_URI value. ( see how to obtain ) --help Help menu. Examples babelsheet generate -f json -n my-own-en-translations -l en_US -p ./my-folder - generates english translations in my-own-en-translations.json file inside ./my-folder folder. babelsheet generate --format ios --path ./translations - generates translations in iOS format in ./translations folder.","title":"Generating translations files"},{"location":"services/#producer","text":"Producer is used to fetch translations file, convert it and then store it in a database. The process is wrapped in a scheduler which repeats the whole operation continuously every 5 minutes by default. Please note that if there are no proper environment variables such as BABELSHEET_CLIENT_ID , BABELSHEET_CLIENT_SECRET and BABELSHEET_REFRESH_TOKEN then producer won't be able to work properly. In such case it runs a command responsible for obtaining those keys. You can run Producer in a docker container - see Docker . If you want to run producer locally, first remember about setting environment variables and running redis , next type: npm run dev-install npm run dev-start-producer Producer should be working now. You can change BABELSHEET_REFRESH_TOKEN read and write providers, check it here . You can also change translations storage from redis to file, check it here .","title":"Producer"},{"location":"services/#api","text":"API is a web server built on top of express.js which serves translations. There is one endpoint available to obtain translations, which is /translations . Translations can be filtered by using: filters[] - e.g. calling /translations?filters[]=en_US.CORE will result in getting translations for en_US locale and section CORE . Other possibility is to use tag as a filter, e.g. /translations?filters[]=en_US.tag1 . format - translations can be served in json/android/ios/yml/xlf formats, just add adtitional parameter e.g. /translations?filters[]=en_US.CORE format=android . Can include tags, as a second part of the filter expression (en_US.tag1.CORE), or first if locale is ommited (tag1.CORE). If there is no locale present, the filter is applied to each locale. keepLocale - translations can include locale prefixes, even when single locale is returned if this is set to true, e.g. /translations?keepLocale=true . comments - translations can include comments, e.g. /translations?comments=true . JSON results don't include comments. version - version (spreadsheet name) that will be returned. If this isn't provided then it's taken from BABELSHEET_SPREADSHEET_NAME environment variable. You can run API in docker container - see Docker . If you want to run API locally, first remember about setting environment variables and running redis , next type: npm run dev-install npm run dev-start-api API should be working now.","title":"API"},{"location":"services/#usage","text":"curl -X GET -g 'http://localhost:3000/translations' curl -X GET -g 'http://localhost:3000/translations?filters[]=en_US.CORE' curl -X GET -g 'http://localhost:3000/translations?filters[]=en_US.CORE.LABELS format=android'","title":"Usage"},{"location":"translations-versioning/","text":"Babelsheet supports versioning - it assumes that every spreadsheet in a worksheet is a specific version of translations. It'll use the name of each sheet as a key when saving it - either via CLI or a producer. Obtaining a specific sheet It's possible to obtain only one sheet by setting a variable BABELSHEET_SPREADSHEET_NAME (if it's not provided it'll default to 'Sheet1'). If that variable isn't set then Babelsheet will download all the versions (sheets). Obtaining a specific version with API When obtaining translations with babelsheet-api it's possible to either explicitly provide a version parameter, f.e.: GET /translations?version=Sheet2 If that parameter isn't provided then API will use BABELSHEET_SPREADSHEET_NAME environment variable.","title":"Translations versioning"}]}